{
  "name": "search-index",
  "description": "A text search index module for Node.js. Search-index allows applications to add, delete and retrieve documents from a corpus. Retrieved documents are ordered by tf-idf relevance, filtering on metadata, and field weighting",
  "version": "0.4.15",
  "homepage": "https://github.com/fergiemcdowall/search-index",
  "engines": {
    "node": ">=0.10.0"
  },
  "dependencies": {
    "JSONStream": "0.9.0",
    "async": "0.9.0",
    "colors": "0.6.2",
    "level-js": "^2.1.6",
    "level-multiply": "0.0.1",
    "leveldown": "^0.10.2",
    "levelup": "^0.19.0",
    "lodash": "^2.4.1",
    "natural": "0.1.28",
    "object-hash": "0.3.0",
    "rimraf": "2.2.8",
    "search-context": "0.1.0",
    "winston": "0.8.3"
  },
  "devDependencies": {
    "brfs": "^1.2.0",
    "browserify": "^8.0.1",
    "jasmine-node": "1.14.5",
    "reuters-21578-json": "0.0.5"
  },
  "author": {
    "name": "Fergus McDowall",
    "email": "fergusmcdowall@gmail.com"
  },
  "keywords": [
    "natural",
    "language",
    "search",
    "index",
    "lucene"
  ],
  "main": "./index.js",
  "browser": "./browser.js",
  "browserify": {
    "transform": [
      "brfs"
    ]
  },
  "maintainers": [
    {
      "name": "Fergus McDowall",
      "email": "fergusmcdowall@gmail.com",
      "url": "https://github.com/fergiemcdowall"
    }
  ],
  "scripts": {
    "test": "rm -rf si* backup.gz && NODE_ENV=test jasmine-node --verbose test/spec/0indexing-spec.js && jasmine-node --verbose test/spec/1.0searching-spec.js && jasmine-node --verbose test/spec/1.5get-doc-spec.js && jasmine-node --verbose test/spec/2deleting-spec.js && jasmine-node --verbose test/spec/4faceting-spec.js && jasmine-node --verbose test/spec/5replication-spec.js && jasmine-node --verbose test/spec/6config-spec.js && jasmine-node --verbose test/spec/7indexing-without-ids-spec.js && jasmine-node --verbose test/spec/8indexing-numbers-spec.js && jasmine-node --verbose test/spec/9filter-spec.js"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/fergiemcdowall/search-index.git"
  },
  "readme": "[![NPM version][npm-version-image]][npm-url] [![NPM downloads][npm-downloads-image]][npm-url] [![MIT License][license-image]][license-url] [![Build Status][travis-image]][travis-url]\n\n**Table of Contents**  *generated with [DocToc](http://doctoc.herokuapp.com/)*\n\n- [Search-index](#user-content-search-index)\n- [The Norch Search Engine](#user-content-the-norch-search-engine)\n- [Features](#user-content-features)\n- [Installation](#user-content-installation)\n- [Usage](#user-content-usage)\n- [Initialization](#user-content-initialization)\n- [API](#user-content-api)\n\t- [si.add](#user-content-siadd)\n\t- [si.del](#user-content-sidel)\n\t- [si.get](#user-content-siget)\n\t- [si.search](#user-content-sisearch)\n\t- [si.match](#user-content-simatch)\n\t- [si.tellMeAboutMySearchIndex](#user-content-sitellmeaboutmysearchindex)\n\t- [si.empty](#user-content-siempty)\n\t- [si.snapshot](#user-content-sisnapshot)\n\t- [si.replicate](#user-content-sireplicate)\n- [Query Parameters](#user-content-query-parameters)\n\t- [query](#user-content-query)\n\t- [offset](#user-content-offset)\n\t- [pageSize](#user-content-pagesize)\n\t- [facets](#user-content-facets)\n\t- [facetLength](#user-content-facetlength)\n\t- [facetSort](#user-content-facetsort)\n\t- [teaser](#user-content-teaser)\n\t- [weight](#user-content-weight)\n\t- [filter](#user-content-filter)\n- [License](#user-content-license)\n\n\n\nSearch-index\n============\n\n[![NPM](https://nodei.co/npm/search-index.png?stars&downloads&downloadRank)](https://nodei.co/npm/search-index/)\n\n[![NPM](https://nodei.co/npm-dl/search-index.png)](https://nodei.co/npm/search-index/)\n\nhttp://npm-stat.com/charts.html?package=search-index\n\nSearch-index is a text search module for Node.js. Think \"node version\nof Lucene, but much simpler\".\n\nSearch-index allows you to perform free-text search over structured or\nunstructured data, and return a resultset ordered by relevance.\n\nSearch-index is built with the [soooperfast levelUP\nmodule](https://github.com/rvagg/node-levelup), and the [very useful\nNatural module](https://github.com/NaturalNode/natural).\n\nThe Point of Search-Index is to simplify set up and operation of an\nsearch engine. Search-index is essentially free from configuration-\nthe index is dynamic and morphs into the structure that you require\nautomatically, based on the documents that it is fed.\n\n\nSearch-index is in an alpha stage- meaning that it has been known to\nwork quite well, but edge cases and portability may be\nchallenging. Query-result is robust. See known issues and performance\ntips below.\n\n\n#The Norch Search Engine\n\nSearch-index is currently the index powering the [Norch search\nengine](https://github.com/fergiemcdowall/norch).\n\n\n#Features\n\n* Full text search\n* Stopword removal\n* Faceting\n* Filtering\n* Fielded search\n* Field weighting\n* Relevance weighting (tf-idf)\n* Paging (offset and resultset length)\n* Teasers\n\n#Installation\n\nReleases are listed\n[here](https://github.com/fergiemcdowall/search-index/releases). Generally\nyou will want the most recent one.\n\nThe easiest way to include search-index in your project is by using npm\n\n    npm install search-index\n    \nThe module can then be initialised by including the line\n\n    si = require('search-index');\n    \nat the top of your app.\n\n#Usage\n\nTo make a searchable index, you must first add documents with `si.add`.\n\nDocuments are then searchable with `si.search`.\n\n#Initialization\n\n`search-index` is called with `require` like so:\n\n```javascript\nvar si = require('search-index');\n```\n\n`search-index` can be initialized with `options` like so:\n\n```javascript\nvar options = { indexPath: 'si2', logLevel: 'error', logSilent: false }\nvar si = require('search-index')(options)\n```\n**Available options**\n\n* **indexPath** The physical location of the index on the filesystem. Default is `si`\n* **logLevel** A winston log level like `info`, `debug` (lots of logs) or `error` (nearly silent). Default is `info`\n* **logSilent** Set to true to suppress any log the search-index might do\n\n#API\n\n##si.add\n\nInserts document into the index\n\n\n```javascript\nsi.add({'batchName': batchName, 'filters': filters}, data, function(err) {\n  if (!err) console.log('indexed!');\n});\n```\n\nWhere `batchName` is any name to tag the batch, and `filters` tells the index which fields can be filtered and agregated on, and `data` is an object containing one or more documents in a format similar to:\n\n\n```javascript\n[\n  {\n    'id':'1'\n    'title':'A really interesting document',\n    'body':'This is a really interesting document',\n    'metadata':['red', 'potato']\n  },\n  {\n    'id':'2'\n    'title':'Another interesting document',\n    'body':'This is another really interesting document that is a bit different',\n    'metadata':['yellow', 'potato']\n  }\n]\n```\n\n...and `filters` is an array of field names that may be contained\nin the document that the index will use for building filters. A filter\nfield must always be an array of single String tokens, for example\n`['metadata','places']`. 'search-index' wont accept strings, so\nremember to wrap home-rolled JSON with 'JSON.parse' to turn it into an\nobject.\n\nExample:\n```javascript\nvar batch = [\n  {\n    'id':'1'\n    'title':'A really interesting document',\n    'body':'This is a really interesting document',\n    'metadata':['red', 'potato']\n  },\n  {\n    'id':'2'\n    'title':'Another interesting document',\n    'body':'This is another really interesting document that is a bit different',\n    'metadata':['yellow', 'potato']\n  }\n];\nvar batchName = 'twoDocs';\nvar filters = ['metadata'];\n\nsi.add({'batchName': batchName, 'filters': filters}, data, function(err) {\n  if (!err) console.log('indexed!');\n});\n```\n\nNote: if you dont specify an id field, ```search-index``` will specify one for you.\n\n##si.del\n\nDelete the document and all associated index entries.\n\n```javascript\nsi.del(docID, function(err) {\n  if (!err) console.log('success!');\n});\n```\n\n##si.get\n\nGet the document and all associated index entries.\n\n```javascript\nsi.get(docID, function(err, doc) {\n  if (!err) console.log(doc);\n});\n```\n\n\n##si.search\n\nQueries the search index\n\n```javascript\nsi.search(query, function(err, results) {\n  //check for errors and do something with search results, for example this:\n  if (!err) console.log(results)\n});\n```\n\n...where query is an object similar to (see Query Parameters for more\ninfo):\n\n```javascript\n    {\n    \"query\": {\n      \"*\": [\"usa\"]\n    },\n    \"offset\": \"0\",\n    \"pageSize\": \"20\",\n    \"facets\": [\n      \"places\",\n      \"organisations\"\n    ],\n    \"weight\": {\n      \"title\": [\n        \"10\"\n      ]\n    },\n    \"filter\": {\n      \"places\": [\n        \"usa\"\n      ]\n    }\n  }\n```\n\n\n##si.match\n\nA matcher is a service that generates a dictionary of words based on\nthe contents of the index, and then returns appropriate sets based on\nsubstrings. For example, once the matcher is generated, a `beginsWith`\nof \"lon\" might return ['London', 'longing', 'longitude'] depending on\nthe contents of the index. Terms are ordered by total occurances in\nindex.\n\n```javascript\nsi.matcher(beginsWith, function(err, matches) {\n  if (!err) console.log(matches);\n});\n```\n\n\n##si.tellMeAboutMySearchIndex\n\nReturns metadata about the state of the index.\n\n```javascript\nsi.tellMeAboutMySearchIndex(function(msg) {\n  console.log(msg);\n});\n```\n\n\n##si.empty\n\nEmpties the search index, can be used in conjunction with replication.\n\n```javascript\nsi.empty(function(err) {\n  if (!err) console.log(\"Emptied! Search-index now contains no documents- please refeed or replicate\");\n});\n```\n\n\n##si.snapshot\n\nReturns a `readStream` that can then be piped on, for instance to file.\n\n```javascript\n//assumes that: var fs = require('fs')\nsi.snapShot(function(readStream) {\n  readStream.pipe(fs.createWriteStream('backup.gz'))\n    .on('close', function() {\n    //a snapshot of the search-index now exists in the file 'backup.gz'\n  });\n});\n```\n\n\n##si.replicate\n\nReplicates an index from a snapshot file generated by `si.snapshot`.\n\n```javascript\n//assumes that backup is in a file called 'backup.gz'\nsi.replicate(fs.createReadStream('backup.gz'), function(msg){\n  that.completed = true;\n});\n```\n\n#Query Parameters\n\n##query\n\nA free text string containing one or many tokens. `*` is\nequivalent to 'search all fields'\n\n```javascript\n    \"query\": {\"*\":[\"usa\"]}\n```\n\nYou can also specify named fields like so :\n\n```javascript\n    \"query\": {\n      \"title\":[\"usa\", \"reagan\"]\n    }\n```\n\nand so:\n\n```javascript\n    \"query\": {\n      \"title\": [\"reagan\"],\n      \"body\": [\"intelligence\", \"agency\", \"contra\"]\n    }\n```\n\n##offset\n\nThe starting point in the resultset of the results returned. Useful\nfor paging\n\n```javascript\n    \"offset\": 0\n```\n\n##pageSize\n\nThe maximum number of results in the resultset that can be\nreturned. Counted from `offset`\n\n```javascript\n    \"pageSize\": 20\n```\n\n##facets\n\nAllows faceted navigation, the parameter is an array of fields. If no\n`facets` is sent, all possible facets are returned.\n\n```javascript\n    \"facets\": [\n      \"topics\",\n      \"places\"\n    ]\n```\n\n##facetLength\nDefines the amount of entries per facet category. Defaults to 10.\n\n```javascript\n    \"facets\": [\n      \"topics\",\n      \"places\"\n    ],\n    \"facetLength\": 50\n```\n\n\n##facetSort\nDefines the sort order of facets. Facets can be sorted on keys or values in an ascending or descening order. Possible values for `facetSort` are `keyAsc`, `keyDesc`, `valueAsc`, and `valueDesc`. The default sort is equivalent to `valueDesc`.\n\n```javascript\n    \"facets\": [\n      \"topics\",\n      \"places\"\n    ],\n    \"facetLength\": 50,\n    \"facetSort\": \"keyAsc\"\n```\n\n\n##teaser\n\nCreates a field that shows where the search terms exist in the given\nfield. For example, a teaser field could be generated from the\ndocument field `body`\n\n```javascript\n    \"teaser\": \"body\"\n```\n\n##weight\n\nSets a factor by which the score of a field should be weighted. Useful\nfor building custom relevancy models\n\n```javascript\n    \"weight\": {\n      \"body\": [\n        \"10\"\n      ],\n      \"title\": [\n        \"5\"\n      ]\n    }\n```\n\n##filter\n\nUsed to return a resultset on a facet.\n\n```javascript\n    \"filter\": {\n      \"places\": [\n        \"ussr\"\n      ]\n    }\n```\n\n#License\n\nSearch-index is released under the MIT license:\n\nCopyright (c) 2013 Fergus McDowall\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n[license-image]: http://img.shields.io/badge/license-MIT-blue.svg?style=flat\n[license-url]: LICENSE\n\n[npm-url]: https://npmjs.org/package/search-index\n[npm-version-image]: http://img.shields.io/npm/v/search-index.svg?style=flat\n[npm-downloads-image]: http://img.shields.io/npm/dm/search-index.svg?style=flat\n\n[travis-url]: http://travis-ci.org/fergiemcdowall/search-index\n[travis-image]: http://img.shields.io/travis/fergiemcdowall/search-index.svg?style=flat\n\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/fergiemcdowall/search-index/issues"
  },
  "_id": "search-index@0.4.15",
  "_from": "search-index@0.4.15"
}
